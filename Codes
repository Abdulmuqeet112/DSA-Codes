Static Stack
#include<iostream>
using namespace std;
class Linked_List{
	int arr[5];
	int size=5;
	int level=-1;
	public:
	
	void push();
	int pop();
};
void Linked_List::push()
	{
		if(level==4)
		{
			cout<<"Stack is already Full !";		
		}
		else
		while(level!=4)
		{
		level++;
		cin>>arr[level];
		}
	}
int Linked_List::pop()
	{
		if(level==-1)
		{
			cout<<"Stack is already empty";
		}
		else 
		while(level!=-1)
		{
			cout<<arr[level];
			level--;
		}
	}
int main()
{
	Linked_List ob;
	cout<<"Enter the Values in the stack :";
	ob.push();
	ob.pop();
}
Static queue
#include <iostream>
using namespace std;
class Queue {
	int queue[7], n = 7, front = - 1, rear = - 1;
	public:
		void Insert();
		void Delete();
		void Display();
};

void Queue::Insert() {
   int val;
   if (rear == 6)
   cout<<"Queue Overflow"<<endl;
   else {
   	for(int i=0;i<7;i++)
   	{
   	if (front == - 1)
      front = 0;
      cout<<"Insert the element in queue : "<<endl;
      cin>>val;
      rear++;
      queue[rear] = val;	
	   }
   }
}
void Queue::Delete() {
   if (front == - 1 || front > rear) {
      cout<<"Queue Underflow ";
      return ;
   } else {
      cout<<"Element deleted from queue is : "<< queue[front] <<endl;
      front++;;
   }
}
void Queue:: Display() {
   if (front == - 1)
   cout<<"Queue is empty"<<endl;
   else {
      cout<<"Queue elements are : ";
      for (int i = front; i <= rear; i++)
      cout<<queue[i]<<" ";
         cout<<endl;
   }
}
int main() {
	Queue ob;
   int ch;
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter your choice : "<<endl;
      cin>>ch;
      switch (ch) {
         case 1: ob.Insert();
         break;
         case 2: ob.Delete();
         break;
         case 3: ob.Display();
         break;
         case 4: cout<<"Exit"<<endl;
         break;
         default: cout<<"Invalid choice"<<endl;
      }
   } while(ch!=4);
   return 0;
}

Singly Dynamic
#include<iostream>
using namespace std;
class node
{
	public:
	int data;
	node *next;	
};
class SinglyLinkedList
{
		public:
		node *head, *tail;
		public:
		Doublylist()
		{
			head=NULL;
			tail=NULL;
		}
		void insertLast()
		{
			int value;
			cout<<"Enter a value to add :";
			cin>>value;
			node *temp=new node;
			temp->data=value;
			temp->next=NULL;
			if(head==NULL)
			{
				head=temp;
				tail=temp;
				temp=NULL;
			}
			else
			{	
				tail->next=temp;
				tail=temp;
			}
		}
		void display()
		{
			node *temp=new node;
			temp=head;
			while(temp!=NULL)
			{
				cout<<temp->data<<"\t";
				temp=temp->next;
			}
		}
		void insert_start()
		{
			int value;
			cout<<"Enter a value to add :";
			cin>>value;
			node *temp=new node;
			temp->data=value;
			temp->next=head;
			head=temp;
		}
		void insert_position()
		{
			int pos;
			int value;
			cout<<"Enter the position where the value is to be added :";
			cin>>pos;
			cout<<"Enter the value to be added ";
			cin>>value;
			node *pre=new node;
			node *cur=new node;
			node *temp=new node;
			cur=head;
			for(int i=1;i<pos;i++)
			{
				pre=cur;
				cur=cur->next;
			}
			temp->data=value;
			pre->next=temp;	
			temp->next=cur;
		}
		void delete_first()
		{
			node *temp=new node;
			temp=head;
			head=head->next;
		 cout << temp->data << endl;
			delete temp;
		
		}
		void delete_last()
		{
			node *current=new node;
			node *previous=new node;
			current=head;
			while(current->next!=NULL)
			{
				previous=current;
				current=current->next;	
			}
			tail=previous;
			previous->next=NULL;
			delete current;
		}
		void delete_position()
		{
			int pos;
			cout<<"Enter the position :";
			cin>>pos;
			node *current=new node;
			node *previous=new node;
			current=head;
			for(int i=1;i<pos;i++)
			{
				previous=current;
				current=current->next;
			}
			previous->next=current->next;
		}
};
int main()
{
	SinglyLinkedList obj;
	int choice;
	do {
		cout<<"////////////////MENU////////////"<<endl;
		cout<<"Press 1 to insert From Start  "<<endl;
		cout<<"Press 2 to instert from last "<<endl;
		cout<<"Press 3 to Insert from Position"<<endl;
		cout<<"Press 4 to Delete from last "<<endl;
		cout<<"Press 5 to Delete from first "<<endl;
		cout<<"Press 6 to delete from position"<<endl;
		cout<<" Press 7 to display "<<endl;  
		
		cout<<"Enter your choice to begin :" ;
		cin>>choice;
		
		switch (choice)
		{
			case 1:
				obj.insert_start();
				break;
			case 2:
				obj.insertLast();
				break;
			case 3:
				obj.insert_position();
				break;
			case 4:
				obj.delete_last();
				break;
			case 5 :
				obj.delete_last();
				break;
			case 6:
				obj.delete_position();
				break;
			case 7:
			obj.display();
				break;
			default:
				cout <<" Wrong Choice added , Consider inputting again" << endl;
				break;
		}
	}while( true);
}


Doubly Dynamic 
#include<iostream>
using namespace std;
class node {
	public:
		int data;
		node* next;
		node* prev;
		node(int val) {
			data=val;
			next=NULL;
			prev=NULL;
		}
		node() {
			data=NULL;
			next=NULL;
			prev=NULL;
		}
};
class DoublyLinkedList {
	private:
		node *head;
	public:
		DoublyLinkedList() {
			head=NULL;
		}
		void insertFirst(int val) {
			node* temp=new node(val);
			temp->next=head;
			if(head!=NULL) {
				head->prev=temp;
			}
			head=temp;
		}
		void insertLast( int x) {
			node* temp=new node(x);
			temp->data=x;
			temp->next=NULL;
			node *last=head;
			while(last->next!=NULL) {
				last=last->next;
			}
			last->next=temp;
		}
		void insertAt( int value, int position) {
			node* newNode = new node(value);
			newNode->data = value;
			newNode->next = NULL;
			if(position < 1) {
				cout<<"\nposition should be >= 1.";
			} else if (position == 1) {
				newNode->next = head;
				head = newNode;
			} else {
				node* temp = head;
				for(int i = 1; i < position-1; i++) {
					if(temp != NULL) {
						temp = temp->next;
					}
				}
				if(temp != NULL) {
					newNode->next = temp->next;
					temp->next = newNode;
				} else {
					cout<<"\nThe previous node is null.";
				}
			}

		}
		void removeFirst() {
			node* todelete=head;
			head=head->next;
			head->prev=NULL;

			delete todelete;

		}
		void removeLast() {
			if(head != NULL) {


				if(head->next == NULL) {
					head = NULL;
				} else {
					node* temp = head;
					while(temp->next->next != NULL)
						temp = temp->next;


					node* lastNode = temp->next;
					temp->next = NULL;
					delete lastNode;
				}
			}

		}
		void removeValue(int pos) {
			node* temp=head;
			int count=1;

			if(pos==1) {
				removeFirst();
				return;
			}
			while(temp!=NULL && count!=pos) {
				temp=temp->next;
				count++;
			}
			temp->prev->next=temp->next;

			if(temp->next!=NULL) {
				temp->next->prev=temp->prev;

			}

			delete temp;
	}
		void displayLL() { 
			node *i=new node;
			i=head;
			cout << "Head --> ";
			for (i = head; i->next != NULL; i = i->next) 
				cout << i->data << " --> ";  
			cout << i->data;
		}
};

Sorted Dynamic
#include <bits/stdc++.h>
using namespace std;
class Node {
	public:
		int data;
		Node* next;
};
class Sorted {
		Node* head;
	public:
		Sorted() {
			head = NULL;
		}
		void Insert(int new_data) {
			Node* current;
			Node* new_node = new Node();
			new_node->data = new_data;
			new_node->next = NULL;
			if (head == NULL
			        || (head)->data
			        >= new_node->data) {
				new_node->next = head;
				head = new_node;
			} else {
				current = head;
				while (current->next != NULL
				        && current->next->data
				        < new_node->data) {
					current = current->next;
				}
				new_node->next = current->next;
				current->next = new_node;
			}
		}
		
			void Remove() {
		    Node *temp=new Node; 
			temp=head;
			head=head->next;
			delete temp;
		}
		void displayLL() { 
			Node *i=new Node;
			i=head;
			cout << "Head --> ";
			for (i = head; i->next != NULL; i = i->next) 
				cout << i->data << " --> "; 
			cout << i->data;
		}
};


/* Driver program to test count function*/
int main() {
	/* Start with the empty list */
    Sorted obj;
	obj.Insert(2);
	
	obj.Insert(1);
	
	obj.Insert(5);
	
	obj.Insert(3);
	
	obj.Insert(4);
	
	obj.Insert(7);
	cout << "Created Linked List\n";
	obj.displayLL();
	cout << endl;
	obj.Remove();

    obj.displayLL();
	return 0;
}

Dynamic Stack
//#include<iostream>
//using namespace std;
//#define size 5
//
//class Node
//{
//public:
//	int data;
//	Node* next;
//	Node()
//	{
//		data = 0;
//		next = NULL;
//	}
//	Node(int y)
//	{
//		data = y;
//		next = NULL;
//	}
//};
//
//class Stack
//{
//	Node* head;
//	int c;
//public:
//	Stack()
//	{
//		head = NULL;
//		c = 0;
//	}
//
//	bool isFull()
//	{
//		if (c >= size)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	bool isEmpty()
//	{
//		if (head = NULL)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	void Push(int x)
//	{
//		Node* newnode = new Node(x);
//		if (isFull())
//		{
//			cout<< "Stack full: ";
//		}
//		if (isEmpty())
//		{
//			head = newnode;
//			c++;
//		}
//		else
//		{
//			Node* temp = head;
//			while (temp->next != NULL)
//			{
//				temp = temp->next;
//			}
//			temp->next = newnode;
//			c++;
//		}
//	}
//
//	void Pop()
//	{
//		if (isEmpty())
//		{
//			cout<< "Stack empty: ";
//		}
//		else if (head->next == NULL)
//		{
//			int x = head->data;
//			head = head->next;
//		}
//		else
//		{
//			int x = 0;
//			Node* temp = head;
//			Node* pre = temp;
//			while (temp->next != NULL)
//			{
//				pre = temp;
//				temp = temp->next;
//			}
//			pre->next = NULL;
//			x = temp->data;
//			delete temp;
//		}
//	}
//
//	void show()
//	{
//		if (isEmpty())
//		{
//			cout<< "Stack empty: ";
//		}
//		else
//		{
//			Node* temp = head;
//			while (temp->next != NULL)
//			{
//				cout<< temp->data << ", ";
//				temp = temp->next;
//			}
//			cout<< temp->data << "-->";
//			cout<<endl;
//		}
//	}
//};
//
//int main()
//{
//	Stack S;
//	for (int i = 0; i<= size; i++)
//	{
//		S.Push(i + 1);
//	}
//	S.show();
//	cout<<endl;
//	S.Pop();
//	cout<< "Value decrement: " <<endl;
//}
Dynamic Queue
//#include<iostream>
//using namespace std;
//#define size 5
//
//class Node
//{
//public:
//	int data;
//	Node* next;
//	Node()
//	{
//		data = 0;
//		next = NULL;
//	}
//	Node(int y)
//	{
//		data = y;
//		next = NULL;
//	}
//};
//
//class Queue
//{
//	Node* front;
//	Node* rear;
//	int c;
//public:
//	Queue()
//	{
//		front = rear;
//		rear = NULL;
//		c = 0;
//	}
//
//	bool isEmpty()
//	{
//		if (front = NULL)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	void enQueue(int x)
//	{
//		Node* newnode = new Node(x);
//		if (c >= size)
//		{
//			cout<< "Queue full: ";
//		}
//		if (isEmpty())
//		{
//			front = rear = newnode;
//			c++;
//		}
//		else if (front->next == NULL)
//		{
//			rear->next == newnode;
//			rear = newnode;
//			c++;
//		}
//		else
//		{
//			rear->next == newnode;
//			rear = newnode;
//			c++;
//		}
//	}
//
//	void deQueue()
//	{
//		if (isEmpty())
//		{
//			cout<< "Queue empty: ";
//		}
//		else if (front == NULL)
//		{
//			int x = front->data;
//			front = rear = NULL;
//			c--;
//		}
//		else
//		{
//			int x = 0;
//			x = front->data;
//			front = front->next;
//			c--;
//		}
//	}
//
//	void show()
//	{
//		Node* temp = front;
//		cout<< "front --!";
//		while (temp->next != NULL)
//		{
//			cout<< temp->data << "||";
//			temp = temp->next;
//		}
//		cout<< temp->data << "->rear" <<endl;
//	}
//};
//
//int main()
//{
//	Queue Q;
//	cout<< "isEmpty()" <<Q.isEmpty();
//	cout<<endl;
//	Q.enQueue(5);
//	Q.enQueue(11);
//	Q.enQueue(15);
//	Q.show();
//	Q.deQueue();
//	Q.show();
//}
Static Circular Queue
//#include <iostream>									////Standard library for output show
//using namespace std;									////for cout and cin functions
//class Queue											////class is a user-defined data type
//{
//public:												////due to public main function can access all data members and functions etc.
//	int front = 0;										////for check spaces
//	int near = 0;										////for check spaces
//	int size = 5;										////for maintain size
//	int Q[5];											////used to store for multiple variables
//	int Q_size = 0;										////for maintain size
//
//	int isFull()										////To check if Queue is full or not
//	{
//		if (Q_size == size)								////Make condition to check queue is full or not
//		{
//			cout<< "Queue is full ";					////If queue full then print queue is full
//			return 1;									////return value
//		}
//		else											////If condition false
//		{
//			cout<< "Queue is not full ";				////If not full then print queue is not full
//			return 0;									////return value
//		}
//	}
//
//	int isEmpty()										////To check if queue is empty or not
//	{
//		if (Q_size == 0)								////If queue is empty
//		{
//			cout<< "Queue is empty ";					////If queue empty then print queue is empty
//			return 1;									////return value
//		}
//		else											////If condition false
//		{
//			cout<< "Queue is not empty ";				////otherwise queue is not empty
//			return 0;									////return value
//		}
//	}
//
//	int enqueue(int val)								////Next number
//	{
//		int if_space_available = isFull();				////To check spaces
//		if (if_space_available != isFull())				////Check if queue not full
//		{
//			Q[near] = val;
//			near = (near++) % size;						////Remainder
//			Q_size++;									////Next number
//			cout<< Q[near];
//			return 1;									////return value
//		}
//		else											////If condition false
//		{
//			return 0;									////return value
//		}
//	}
//
//	int dequeue()										////Remove from first
//	{
//		int x;											////Take 1 variable to store number
//		if (!isEmpty())									////Check if queue not empty
//		{
//			x = Q[front];
//			front = (front++) % size;					////Remainder
//			Q_size++;									////First done and space available in last
//			cout<< Q[front];
//			return x;									////return value
//		}
//		else											////If condition false
//		{
//			return -1;									////return value
//		}
//	}
// 
//};
//
//int main()
//{
//	Queue Q;															////Data member of class to access functions from class
//	int choice;															////Data member for choose
//	do																	////Using loop
//	{
//		cout<< "Menu Driven Program: " <<endl<<endl;				////Menu Driven Program
//		cout<< "Press 1 for check full: " <<endl;						////Press 1 for check full
//		cout<< "Press 2 for check empty: " <<endl;					////Press 2 for check empty
//		cout<< "Press 3 for enqueue: " <<endl;						////Press 3 for enqueue
//		cout<< "Press 4 for dequeue: " <<endl;						////Press 4 for dequeue
//		cout<< "Enter choice: ";										////Enter number
//		cin>> choice;													////Number enter from user
//		switch (choice)													////Siwtch case for Press numbers
//		{
//		case 1:															////If Press 1
//			Q.isFull();													////Then go to isFull()
//			break;														////Statement break
//		case 2:															////If Press 2
//			Q.isEmpty();												////Then go to isEmpty()
//			break;														////Statement break
//		case 3:															////If Press 3
//			Q.enqueue(7);												////Then go to enqueue()
//			break;														////Statement break
//		case 4:															////If Press 4
//			Q.dequeue();												////Then go to dequeue()
//			break;														////Statement break
//		default:														////If Press any other number
//			exit(0);													////Program exit
//			break;														////Statement break
//		}
//		cout<<endl<<endl;											////Next line
//	} while (choice != 5);												////Program will run until Press 5
//}
Static Singly LINkEd list
//#include<iostream>
//using namespace std;
//class LinkedList
//{
//public:
//	int arr[5];
//	int next_f[5];
//	int next_e[5];
//	int size;
//	int fill;
//	int empty;
//
//	LinkedList()
//	{
//		fill = -1;
//		empty = 0;
//		for (int i = 0; i< size; i++)
//		{
//			arr[i] = next_f[i] = -1;
//			next_e[i] = i + 1;
//		}
//		next_e[size - 1] = -1;
//	}
//
//	bool isFull()
//	{
//		if (empty == -1)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	bool isEmpty()
//	{
//		if (empty == 0)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	void display_fill()
//	{
//		if (isEmpty())
//		{
//			cout<< "List is Empty: ";
//		}
//		else
//		{
//			int i = 0;
//			for (i = fill; next_f[i] != -1; i = next_f[i])
//			{
//				cout<<i<< ", ";
//			}
//		}
//	}
//
//	void display_empty()
//	{
//		if (isEmpty())
//		{
//			cout<< "List is Empty: ";
//		}
//		else if (isFull())
//		{
//			cout<< "List is Full: ";
//		}
//		else
//		{
//			int i = 0;
//			for (i = empty; next_e[i] != -1; i = next_e[i])
//			{
//				cout<<i<< ", ";
//			}
//			cout<<i;
//		}
//	}
//
//	void insert(int x)
//	{
//		if (isFull())
//		{
//			cout<< "No spaces available: " <<endl;
//		}
//		else
//		{
//			arr[empty] = x;
//			next_f[empty] = fill;
//			fill = empty;
//			empty = next_e[empty];
//		}
//	}
//
//	void remove()
//	{
//		if (isEmpty())
//		{
//			cout<< "List is empty" <<endl;
//		}
//		else if (next_f[fill] == -1)
//		{
//			int temp = empty;
//			empty = fill;
//			fill = -1;
//			next_e[empty] = temp;
//		}
//		else
//		{
//			int temp = empty;
//			empty = fill;
//			fill = next_f[fill];
//			next_e[empty] = temp;
//		}
//	}
//
//	void remove(int x)
//	{
//		if (isEmpty())
//		{
//			cout<< "List is empty" <<endl;
//		}
//		else if (next_f[fill] == -1)
//		{
//			if (arr[fill] == x)
//			{				
//				empty = fill;
//				arr[empty] = -1;
//				fill = arr[empty];
//			}
//			else
//			{
//				cout<< "This number is not in list: ";
//			}
//		}
//		else
//		{
//			int index = -1;
//			bool found = false;
//			for (int i = 0; i< size; i++)
//			{
//				if (arr[i] == x)
//				{
//					index = i;
//					found = true;
//				}
//			}
//			if (found == false)
//			{
//				cout<< "This number is not in list";
//			}
//			else
//			{
//				for (int i = index; i< size; i++)
//				{
//					arr[i] = arr[i + 1];
//				}
//				arr[fill] = -1;
//				empty = fill;
//				next_f[fill] = -1;
//				fill = -1;
//			}
//		}
//	}
//
//	//void remove(int x)
//	//{
//	//	if (isEmpty())
//	//	{
//	//		cout<< "List is empty" <<endl;
//	//	}
//	//	else if (next_f[fill] == -1)
//	//	{
//	//		if (arr[fill] == x)
//	//		{
//	//			int temp = empty;
//	//			empty = fill;
//	//			fill = -1;
//	//			next_e[empty] = temp;
//	//		}
//	//	}
//	//	else
//	//	{
//	//		int i;
//	//		int pre_i;
//	//		for (i = fill; next_f[i] != -1; i = next_f[i])
//	//		{
//	//			if (arr[i] == x)
//	//			{
//	//				break;
//	//			}
//	//			pre_i = i;
//	//		}
//	//		if (i == -1)
//	//		{
//	//			cout<< "List is empty" <<endl;
//	//		}
//	//		else
//	//		{
//	//			if (fill == i)
//	//			{
//	//				int temp = empty;
//	//				empty = fill;
//	//				fill = next_f[fill];
//	//				next_e[empty] = temp;
//	//			}
//	//			else if (next_f[i] == -1)
//	//			{
//	//				int temp = empty;
//	//				empty = i;
//	//				next_f[pre_i] = -1;
//	//				next_e[empty] = temp;
//	//			}
//	//			else
//	//			{
//	//				int temp = empty;
//	//				empty = i;
//	//				next_f[pre_i] = next_f[i];
//	//				next_e[empty] = temp;
//	//			}
//	//		}
//	//	}
//	//}
//	
//	void display_even()
//	{
//		int i = 0;
//		for (i = 0; i< size; i++)
//		{
//			if (arr[i] % 2 == 0)
//			{
//				cout<<arr[i];
//				cout<<endl;
//			}
//		}
//	}
//	
//	void display_odd()
//	{
//		int i;
//		for (i = 0; i< size; i++)
//		{
//			if (arr[i] % 2 != 0)
//			{
//				cout<<arr[i];
//				cout<<endl;
//			}
//		}
//	}
//
//	void display()
//	{
//		int i = 0;
//		cout<< "Head: ";
//		for (i = 0; i<= fill; i++)
//		{
//			cout<<arr[i] << "-->";
//		}
//		cout<< "Null: ";
//	}
//};
//
//int main()
//{
//	LinkedList L;
//	L.insert(3);
//	L.insert(7);
//	L.insert(6);
//	L.display();
//	L.display_fill();
//	L.remove(3);
//	L.display();
//}



//int main()
//{
//	LinkedList L;
//	int choice;
//	do
//	{
//		cout<< "Menu Driven Program: " <<endl<<endl;
//		cout<< "Press 1 for display_fill: " <<endl;
//		cout<< "Press 2 for display_empty: " <<endl;
//		cout<< "Press 3 for add: " <<endl;
//		cout<< "Press 4 for remove: " <<endl;
//		cout<< "Press 5 for remove parameterized: " <<endl;
//		cout<< "Press 6 for display even: " <<endl;
//		cout<< "Press 7 for display odd: " <<endl;
//		cout<< "Enter choice: ";
//		cin>>choice;
//		switch (choice)
//		{
//		case 1:
//			L.display_fill();
//			break;
//		case 2:
//			L.display_empty();
//			break;
//		case 3:
//			L.add(7);
//			break;
//		case 4:
//			L.add(7);
//			L.remove();
//			break;
//		case 5:
//			L.add(6);
//			L.remove(7);
//			break;
//		case 6:
//			L.add(8);
//			L.display_even();
//			break;
//		case 7:
//			L.add(7);
//			L.display_odd();
//			break;
//		default:
//			exit(0);
//			break;
//		}
//		cout<<endl<<endl;
//	} while (choice != 5);
//}

